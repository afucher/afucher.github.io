{"componentChunkName":"component---src-templates-blog-post-js","path":"/fscheck-mudando-sua-visao-sobre-testes/","result":{"data":{"markdownRemark":{"frontmatter":{"title":"FsCheck: Mudando sua visão sobre Testes","featuredImage":{"childImageSharp":{"fluid":{"src":"/static/d584120c8ed1b98a738a746f4663d21f/14b42/fscheck-01.jpg"}}}},"html":"<p>Existem momentos em um projeto que simplesmente testar os valores absolutos de entrada e saída de um método não são suficientes para eu me sentir seguro. Um exemplo simples é uma função de multiplicação, acho que nunca vou me sentir seguro de saber que pensei em todas entradas e saídas. Nestes casos uma opção é a criação de testes de propriedade, e para C# existe a biblioteca <a href=\"https://github.com/fscheck/FsCheck\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FsCheck</a>.</p>\n<p>A ideia desse post é apresentar a biblioteca FSCheck e como ela me ajudou a fazer um teste num projeto que estou participando.</p>\n<hr>\n<h2>FSCheck</h2>\n<p>O projeto consiste em mostrar uma pergunta e a pessoa responde, se a pessoa erra a dificuldade da pergunta aumenta e se a pessoa acerta a dificuldade diminui. Isso influencia para saber a periodicidade que devo mostrar a pergunta para a pessoa.</p>\n<blockquote>\n<p>Esse post não tem a intenção de explicar conceitos básicos de teste de propriedade ou testes generativos  </p>\n</blockquote>\n<p>Se acharem interessante fazer um post sobre isso, mandem nos comentários :)</p>\n<p>Quem faz o cálculo dessa dificuldade nova, são uns algoritmos bem legais (mas que eu não criei). Existem vários, e na real, não me importa muito o que eles fazem. Porém, eu quero ter certeza de que se uma pergunta tinha um nível de dificuldade e a pessoa acertou, o novo nível de dificuldade deve ser menor que o anterior.</p>\n<p>Resumindo, podemos ver que o meu método tem algumas propriedades:</p>\n<ul>\n<li>Quando acertar, a dificuldade tem que diminuir;</li>\n<li>Quando errar, a dificuldade tem que aumentar;</li>\n</ul>\n<p>E é isso que quero testar, uma <strong>propriedade</strong> do meu método.</p>\n<p>O código que tem a propriedade que quero testar é o método que é executado na primeira linha desse trecho de código:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> Cartão AtualizarDadosDeRevisã<span class=\"token function\">o</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResultadoEnum</span> resultado<span class=\"token punctuation\">,</span> IEstratégia estratégia<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> novaDificuldade <span class=\"token operator\">=</span> estratégia<span class=\"token punctuation\">.</span><span class=\"token function\">AjustarDificuldade</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> resultado<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>PorcentagemDificuldade <span class=\"token operator\">=</span> novaDificuldade<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Em um teste que estamos acostumados a fazer iríamos ter um código mais ou menos assim:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Test</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">DeveDiminuirDificuldadeQuandoAcertarAResposta</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> estratégia <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SuperMemo2Estraté<span class=\"token function\">gia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> cartão <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Cartã<span class=\"token function\">oBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ComPorcentagemDeDificuldade</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> novaPorcentagem <span class=\"token operator\">=</span> estratégia<span class=\"token punctuation\">.</span><span class=\"token function\">AjustarDificuldade</span><span class=\"token punctuation\">(</span>cartão<span class=\"token punctuation\">,</span> ResultadoEnum<span class=\"token punctuation\">.</span>Acertou<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  Assert<span class=\"token punctuation\">.</span><span class=\"token function\">True</span><span class=\"token punctuation\">(</span>novaPorcentagem <span class=\"token operator\">&lt;</span> cartão<span class=\"token punctuation\">.</span>PorcentagemDificuldade<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//Temos que fazer esse Assert, pois como disse não sei (ou não me importo) com a implementação da estratégia.</span>\n  <span class=\"token comment\">//Se tivesse certeza do resultado final, poderia fazer algo assim:</span>\n  <span class=\"token comment\">//novaPorcentagem.Should().Be(96);</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Esse teste em um primeiro momento, testa o que preciso e é bem simples. Porém, se for pensar, será que para a entrada 99 ele funciona? E para 98? E para 97? E para.. Bom acho que você entendeu hehehe</p>\n<h3>Então como testar uma propriedade e tentar garantir um número maior de entradas?</h3>\n<p><strong>FSCheck</strong> é uma biblioteca que provê formas para testar automaticamente código baseado em propriedades.\nComo no projeto estamos utilizando NUnit para testes, precisamos adicionar uma versão específica: <a href=\"https://www.nuget.org/packages/FsCheck.Nunit/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FsCheck.NUnit</a></p>\n<p>Com o FsCheck mudamos o teste de um teste de unidade para um teste de propriedade, portanto as duas primeiras alterações são:</p>\n<ul>\n<li>Alterar a <em>annotation</em> de Test para Property;  </li>\n<li>O retorno do método de teste agora é Property ao invés de void;  </li>\n</ul>\n<p>Com a mudança do retorno, devemos agora retornar qual a propriedade que queremos testar, que no nosso caso é se a <em>novaPorcentagem</em> é menor que a anterior. Com essas mudanças nosso teste está assim por enquanto:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Property</span></span><span class=\"token punctuation\">]</span> \n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Property</span> <span class=\"token function\">DeveDiminuirDificuldadeQuandoAcertarAResposta</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">var</span> estratégia <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SuperMemo2Estraté<span class=\"token function\">gia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">var</span> cartão <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Cartã<span class=\"token function\">oBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ComPorcentagemDeDificuldade</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> novaPorcentagem <span class=\"token operator\">=</span> estratégia<span class=\"token punctuation\">.</span><span class=\"token function\">AjustarDificuldade</span><span class=\"token punctuation\">(</span>cartão<span class=\"token punctuation\">,</span> ResultadoEnum<span class=\"token punctuation\">.</span>Acertou<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>novaPorcentagem <span class=\"token operator\">&lt;</span> cartão<span class=\"token punctuation\">.</span>PorcentagemDificuldade<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToProperty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nesse teste, fica explícita a propriedade que queremos testar! Porém, continuamos com o valor fixo de 100, caindo no mesmo problema anterior. O FsCheck consegue cuidar disso para nós, para isso basta eu dizer para ele que quero que ele gere, expondo como um parâmetro do meu teste o que ele precisa gerar.</p>\n<p>Portanto vamos alterar a assinatura do nosso teste para receber a porcentagem e usá-la no teste:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Property</span></span><span class=\"token punctuation\">]</span> \n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Property</span> <span class=\"token function\">DeveDiminuirDificuldadeQuandoAcertarAResposta</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">uint</span></span> porcentagem<span class=\"token punctuation\">)</span> </span><span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">var</span> estratégia <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SuperMemo2Estraté<span class=\"token function\">gia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"> <span class=\"token keyword\">var</span> cartão <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Cartã<span class=\"token function\">oBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ComPorcentagemDeDificuldade</span><span class=\"token punctuation\">(</span>porcentagem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> novaPorcentagem <span class=\"token operator\">=</span> estratégia<span class=\"token punctuation\">.</span><span class=\"token function\">AjustarDificuldade</span><span class=\"token punctuation\">(</span>cartão<span class=\"token punctuation\">,</span> ResultadoEnum<span class=\"token punctuation\">.</span>Acertou<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>novaPorcentagem <span class=\"token operator\">&lt;</span> cartão<span class=\"token punctuation\">.</span>PorcentagemDificuldade<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToProperty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>E ao rodar o teste temos a seguinte saída:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Executando AstroCards.test.AstroCards.UnitTests.AstroCards.UnitTests.Specs.EstrategiasRevisao.SuperMemo2EstratégiaTestes.DeveAumentarDificuldadeQuandoErrarAResposta <span class=\"token punctuation\">..</span>.\nOk, passed <span class=\"token number\">100</span> tests.</code></pre></div>\n<p>Isso pode gerar uma confusão, já que criamos apenas um teste. O que acontece é que o FsCheck por padrão gera 100 entradas para o nosso teste.</p>\n<p>Se quiser ver as entradas, pode utilizar o método Collect:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>novaPorcentagem <span class=\"token operator\">&lt;</span> porcentagem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToProperty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Collect</span><span class=\"token punctuation\">(</span>porcentagem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Ao rodar o teste teremos algo parecido com isso na saída:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Ok, passed <span class=\"token number\">100</span> tests.\n<span class=\"token number\">7</span>% 3u.\n<span class=\"token number\">5</span>% 6u.\n<span class=\"token number\">5</span>% 17u.\n<span class=\"token number\">4</span>% 7u.\n<span class=\"token number\">4</span>% 28u.\n<span class=\"token number\">3</span>% 9u.\n<span class=\"token number\">3</span>% 8u.\n<span class=\"token number\">3</span>% 5u.\n<span class=\"token number\">3</span>% 4u.\n<span class=\"token number\">3</span>% 1u.\n<span class=\"token number\">2</span>% 64u.\n<span class=\"token number\">2</span>% 48u.\n<span class=\"token number\">2</span>% 47u.\n<span class=\"token number\">2</span>% 42u.\n<span class=\"token number\">2</span>% 40u.\n<span class=\"token number\">2</span>% 2u.\n<span class=\"token number\">2</span>% 29u.\netc<span class=\"token punctuation\">..</span>.</code></pre></div>\n<p>Ele mostra todas as entradas que foram testadas e, a esquerda delas, qual a % de vezes que aquela mesma entrada foi usada.</p>\n<p>O mais interessante, isso tudo rodou em 1.246s! Com isso consigo testar diversas entradas, e garantir que a propriedade do meu método funciona!</p>\n<p>Agora um ponto de atenção, só dissemos para o FsCheck que queremos uma entrada do tipo <em>uint</em>, porém para nossa porcentagem queremos somente números de 0 até 100.</p>\n<p>O FsCheck disponibiliza formas de lidar com isso, mas isso é um assunto para um próximo post!</p>\n<hr>\n<p>Eai, gostou? Tem dúvidas? Quer saber mais sobre o FsCheck ou Testes de Propriedade?\nDeixe um comentário :)</p>\n<p>Abraços</p>\n<p>Post original: <em><a href=\"http://high5devs.com/2020/05/fscheck-mudando-sua-visao-sobre-testes/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">High5Devs</a></em><br>\n<em>Imagem usada no post <a href=\"https://unsplash.com/@chrisliverani?utm_source=unsplash&#x26;utm_medium=referral&#x26;utm_content=creditCopyText\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Chris Liverani</a> on <a href=\"https://unsplash.com/?utm_source=unsplash&#x26;utm_medium=referral&#x26;utm_content=creditCopyText\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Unsplash</a></em></p>"}},"pageContext":{"slug":"/fscheck-mudando-sua-visao-sobre-testes/"}}}